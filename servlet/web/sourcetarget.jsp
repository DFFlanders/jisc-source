<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html><head><title>Sources and Targets</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/></head><style type="text/css"><!--	body { 	background-color:#E8E8E8; 	background-image: url(../../digitalstate-web/web/col_im/bg.gif);	}		 .box1 {        position:absolute;        left:0px;        top:0px;        height:34px;		z-index:1;    }	 .box2 {        position:absolute;        left:0px;        top:41px;        width:154px;		height:800px;		}			 .box3 {        position:absolute;        left:64px;        top:43px;    }			 .box4 {        position:absolute;        left:204px;    }	  	a:link {        color:#333333;        text-decoration:none;    }    a:active { color:#333333;        text-decoration:none;	}    a:visited { color:#3D467F;        text-decoration:none;	}	a:hover { color:#333333;        text-decoration:underline;	}.bottibody {color: #333333; font-size: 11px; line-height: 16px; font-family: Verdana, Arial, Helvetica, sans-serif} .box6 {	position:absolute;	top:6px;	width:99%;	z-index: 0;		}			--></style><script language="JavaScript" type="text/JavaScript"><!--function VC_openWindow(theURL,winName,features) { //v2.0  window.open(theURL,winName,features);}//--></script></head><body><%	java.util.Vector profileDisplayNameVector = new java.util.Vector();	String selectedProfile = request.getParameter("profile");		String sourceDisplayName = null;	String sourceRepositoryId = null;	java.util.Vector targetDisplayNameVector = new java.util.Vector(); 	java.util.Vector targetRepositoryIdVector = new java.util.Vector(); 	try {		javax.xml.parsers.DocumentBuilderFactory dbf = null;		javax.xml.parsers.DocumentBuilder db = null;		org.w3c.dom.Document document = null;					dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();		db = dbf.newDocumentBuilder();		document = db.parse(new java.io.FileInputStream("../conf/MigrationProfiles.xml"));		org.w3c.dom.NodeList profiles = document.getElementsByTagName("profile");					int numProfiles = profiles.getLength();		for (int i=0; i < numProfiles; i++) {			org.w3c.dom.Element profile = (org.w3c.dom.Element)profiles.item(i);			org.w3c.dom.NodeList nl = profile.getElementsByTagName("displayName");			int numNodes = nl.getLength();			if (numNodes > 0) {				org.w3c.dom.Element element = (org.w3c.dom.Element)nl.item(0);				if (element.hasChildNodes()) {					String profileDisplayName = element.getFirstChild().getNodeValue();					if (profileDisplayName.equals(selectedProfile)) {									nl = profile.getElementsByTagName("source");						numNodes = nl.getLength();						if (numNodes > 0) {							element = (org.w3c.dom.Element)nl.item(0);							nl = element.getElementsByTagName("displayName");							numNodes = nl.getLength();							if (numNodes > 0) {								org.w3c.dom.Element e = (org.w3c.dom.Element)nl.item(0);								if (e.hasChildNodes()) {									sourceDisplayName = e.getFirstChild().getNodeValue();								}							}							nl = element.getElementsByTagName("repositoryId");							numNodes = nl.getLength();							if (numNodes > 0) {								org.w3c.dom.Element e = (org.w3c.dom.Element)nl.item(0);								if (e.hasChildNodes()) {									sourceRepositoryId = e.getFirstChild().getNodeValue();								}							}						}												org.w3c.dom.NodeList targetsNodeList = profile.getElementsByTagName("targets");						int numTargetsNodes = targetsNodeList.getLength();						if (numTargetsNodes > 0) {							org.w3c.dom.Element targets = (org.w3c.dom.Element)targetsNodeList.item(0);							org.w3c.dom.NodeList targetNodeList = targets.getElementsByTagName("target");							int numTargetNodes = targetNodeList.getLength();							for (int j=0; j < numTargetNodes; j++) {								org.w3c.dom.Element target = (org.w3c.dom.Element)targetNodeList.item(j);								org.w3c.dom.NodeList subNodeList = target.getElementsByTagName("displayName");								int numSubNodes = subNodeList.getLength();								if (numSubNodes > 0) {									org.w3c.dom.Element e = (org.w3c.dom.Element)subNodeList.item(0);									if (e.hasChildNodes()) {										targetDisplayNameVector.addElement(e.getFirstChild().getNodeValue());									}								}								subNodeList = target.getElementsByTagName("repositoryId");								numSubNodes = subNodeList.getLength();								if (numSubNodes > 0) {									org.w3c.dom.Element e = (org.w3c.dom.Element)subNodeList.item(0);									if (e.hasChildNodes()) {										targetRepositoryIdVector.addElement(e.getFirstChild().getNodeValue());									}								}							}						}					}				}			}		}	} catch (Exception ex) {		String msg = ex.getMessage();%>		<%=msg%><%	}%><body><div align="left" class="box2">  Profile:  <%=selectedProfile%>  Source:	<%=sourceDisplayName%>  Targets:<%	for (int i=0, size = targetDisplayNameVector.size(); i < size; i++) {		String nextDisplayName = (String)targetDisplayNameVector.elementAt(i);%>		<%=nextDisplayName%><%	}%>	<p>	</p>	<p>	</p>List of all Sources	<p>	</p><%	try {		// setup		edu.calstate.osidutil.ProviderUtilities providerUtilities = new edu.calstate.osidutil.ProviderUtilities("../conf/providerConfig.xml",true);		edu.calstate.osidutil.SearchUtilities searchUtilities = new edu.calstate.osidutil.SearchUtilities(providerUtilities);		com.harvestroad.cip.osid.fedsearch.Utilities utilities = new com.harvestroad.cip.osid.fedsearch.Utilities(providerUtilities);					// fill UI list control with the strings in this vector		String names[] = utilities.getRepositoryDisplayNames();		// here we dump the list to standard out		//System.out.println("list of repository display names");		for (int i=0; i < names.length; i++) {			System.out.println(names[i]);		}					/*  			We need the repository associated with each name selected in the UI control.  Here			let's assume 0-based entries 1 and 3 are selected.		*/		org.osid.repository.Repository repositories[] = utilities.getRepositories();		org.osid.repository.Repository selectedRepositories[] = new org.osid.repository.Repository[2];		selectedRepositories[0] = repositories[0];		selectedRepositories[1] = repositories[2];					// we need the search terms the user enters into a UI edit control; here I hard-code a sample		String criteria = "Food";					// now we call the search code		org.osid.repository.AssetIterator assetIterator = searchUtilities.keywordSearch(criteria,																						selectedRepositories,																						new edu.calstate.osidutil.SharedProperties());					// we may want a wait indication here					// here is a test for any results at all		if (!assetIterator.hasNextAsset()) {			System.out.println("no results found");		}		// now we display the results of the search		while (assetIterator.hasNextAsset()) {			org.osid.repository.Asset asset = assetIterator.nextAsset();			System.out.println("asset's name is " + asset.getDisplayName());			System.out.println("asset's ID is " + asset.getId().getIdString());			System.out.println("asset's source is " + utilities.getQualifiedDisplayName(asset.getRepository()));			System.out.println("asset's quick-fetch URL is " + utilities.getURL(asset));		}	} catch (Throwable t) {		t.printStackTrace();	}%></body></html>