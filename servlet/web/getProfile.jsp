<%	boolean isAuthenticated = false;	String token = request.getParameter("token");	String profileDisplayName = request.getParameter("profile");		// TODO: really needs to be some form of decrypt or unpack	// for now make a trivial test	String userId = token; 				isAuthenticated = ((token != null) && (token.length() > 0));	//System.out.println("token to match is " + token);		if (isAuthenticated)	{		StringBuffer xml = new StringBuffer("\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>");		try {			boolean found = false;			javax.xml.parsers.DocumentBuilderFactory dbf = javax.xml.parsers.DocumentBuilderFactory.newInstance();			javax.xml.parsers.DocumentBuilder db = dbf.newDocumentBuilder();			org.w3c.dom.Document document = db.parse(new java.io.FileInputStream("../conf/MigrationProfiles.xml"));						org.w3c.dom.NodeList userNodeList = document.getElementsByTagName("user");						int numUserNodes = userNodeList.getLength();			for (int i=0; i < numUserNodes; i++) {				org.w3c.dom.Element userElement = (org.w3c.dom.Element)userNodeList.item(i);				String id = userElement.getAttribute("id");				if (id.equals(userId)) {					found = true;					org.w3c.dom.NodeList profilesNodeList = userElement.getElementsByTagName("profiles");								int numProfilesNodes = profilesNodeList.getLength();					if (numProfilesNodes > 0) {						org.w3c.dom.Element profilesElement = (org.w3c.dom.Element)profilesNodeList.item(0);												org.w3c.dom.NodeList profileNodeList = profilesElement.getElementsByTagName("profile");									int numProfileNodes = profileNodeList.getLength();						for (int j=0; j < numProfileNodes; j++) {							org.w3c.dom.Element profileElement = (org.w3c.dom.Element)profileNodeList.item(j);														org.w3c.dom.NodeList displayNameNodeList = profileElement.getElementsByTagName("displayName");							int numDisplayNames = displayNameNodeList.getLength();							if (numDisplayNames > 0) {								org.w3c.dom.Element displayNameElement = (org.w3c.dom.Element)displayNameNodeList.item(0);								if (displayNameElement.hasChildNodes()) {									String value = displayNameElement.getFirstChild().getNodeValue();									if (value.equals(profileDisplayName)) {										xml.append("\n<profile>");										xml.append("\n\t<displayName>");										xml.append(value);										xml.append("</displayName>");										org.w3c.dom.NodeList sourceNodeList = profileElement.getElementsByTagName("source");													int numSourceNodes = sourceNodeList.getLength();										if (numSourceNodes > 0) {											org.w3c.dom.Element sourceElement = (org.w3c.dom.Element)sourceNodeList.item(0);										 	//value = sourceElement.getFirstChild().getNodeValue();											xml.append("\n\t<source>");											//xml.append(value);											org.w3c.dom.NodeList sourceDisplayNameNodeList = sourceElement.getElementsByTagName("displayName");														int numSourceDisplayNames = sourceDisplayNameNodeList.getLength();											if (numSourceDisplayNames > 0) {												org.w3c.dom.Element sourceDisplayNameElement = (org.w3c.dom.Element)sourceDisplayNameNodeList.item(0);										 		value = sourceDisplayNameElement.getFirstChild().getNodeValue();												xml.append("\n\t\t<displayName>");												xml.append(value);												xml.append("</displayName>");											}											org.w3c.dom.NodeList sourceRepositoryIdNodeList = sourceElement.getElementsByTagName("repositoryId");														int numSourceRepositoryIds = sourceRepositoryIdNodeList.getLength();											if (numSourceRepositoryIds > 0) {												org.w3c.dom.Element sourceRepositoryIdElement = (org.w3c.dom.Element)sourceRepositoryIdNodeList.item(0);										 		value = sourceRepositoryIdElement.getFirstChild().getNodeValue();												xml.append("\n\t\t<repositoryId>");												xml.append(value);												xml.append("</repositoryId>");											}											xml.append("\n\t</source>");																						org.w3c.dom.NodeList targetNodeList = profileElement.getElementsByTagName("target");														int numTargetNodes = targetNodeList.getLength();											if (numTargetNodes > 0) {												xml.append("\n\t<targets>");												for (int k=0; k < numTargetNodes; k++) {													org.w3c.dom.Element targetElement = (org.w3c.dom.Element)targetNodeList.item(k);											 		//value = targetElement.getFirstChild().getNodeValue();													xml.append("\n\t\t<target>");													//xml.append(value);													org.w3c.dom.NodeList targetDisplayNameNodeList = targetElement.getElementsByTagName("displayName");																int numTargetDisplayNames = targetDisplayNameNodeList.getLength();													if (numTargetDisplayNames > 0) {														org.w3c.dom.Element targetDisplayNameElement = (org.w3c.dom.Element)targetDisplayNameNodeList.item(0);										 				value = targetDisplayNameElement.getFirstChild().getNodeValue();														xml.append("\n\t\t\t<displayName>");														xml.append(value);														xml.append("</displayName>");													}													org.w3c.dom.NodeList targetRepositoryIdNodeList = targetElement.getElementsByTagName("repositoryId");																int numTargetRepositoryIds = targetRepositoryIdNodeList.getLength();													if (numTargetRepositoryIds > 0) {														org.w3c.dom.Element targetRepositoryIdElement = (org.w3c.dom.Element)targetRepositoryIdNodeList.item(0);										 				value = targetRepositoryIdElement.getFirstChild().getNodeValue();														xml.append("\n\t\t\t<repositoryId>");														xml.append(value);														xml.append("</repositoryId>");													}													xml.append("\n\t\t</target>");												}												xml.append("\n\t</targets>");											}																						org.w3c.dom.NodeList crosswalkNodeList = profileElement.getElementsByTagName("crosswalk");														int numCrosswalkNodes = crosswalkNodeList.getLength();											if (numCrosswalkNodes > 0) {												xml.append("\n\t<crosswalks>");												for (int k=0; k < numCrosswalkNodes; k++) {													org.w3c.dom.Element crosswalkElement = (org.w3c.dom.Element)crosswalkNodeList.item(k);													xml.append("\n\t\t<crosswalk>");									 				value = crosswalkElement.getFirstChild().getNodeValue();													xml.append(value);													xml.append("</crosswalk>");												}												xml.append("\n\t</crosswalks>");											}											org.w3c.dom.NodeList assetxformNodeList = profileElement.getElementsByTagName("assetxform");														int numAssetxformNodes = assetxformNodeList.getLength();											if (numAssetxformNodes > 0) {												xml.append("\n\t<assetxforms>");												for (int k=0; k < numAssetxformNodes; k++) {													org.w3c.dom.Element assetxformElement = (org.w3c.dom.Element)assetxformNodeList.item(k);													xml.append("\n\t\t<assetxform>");									 				value = assetxformElement.getFirstChild().getNodeValue();													xml.append(value);													xml.append("</assetxform>");												}												xml.append("\n\t</assetxforms>");											}											org.w3c.dom.NodeList objectxformNodeList = profileElement.getElementsByTagName("objectxform");														int numObjectxformNodes = objectxformNodeList.getLength();											if (numObjectxformNodes > 0) {												xml.append("\n\t<objectxforms>");												for (int k=0; k < numObjectxformNodes; k++) {													org.w3c.dom.Element objectxformElement = (org.w3c.dom.Element)objectxformNodeList.item(k);													xml.append("\n\t\t<objectxform>");									 				value = objectxformElement.getFirstChild().getNodeValue();													xml.append(value);													xml.append("</objectxform>");												}												xml.append("\n\t</objectxforms>");											}										}										xml.append("\n</profile>");									}								}							}						}					}				}        	}			if (!found) {				xml.append("\n<profile/>");			}    	} catch (Throwable t) {}%>		<%=xml%><%	} else {%>		Authentication Error<%		}%>