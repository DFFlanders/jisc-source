<project name="BBCS" default="default" basedir=".">

<!-- $Revision: 1.2 $ / $Date: 2005/04/13 13:59:44 $ -->

<!-- 
This ant build file:
        Generates Java source from .GEN files
        builds from src into build/classes
-->

<!-- ===================== Property Definitions =========================== -->
<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

-->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>

  
<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->

  <property name="app.name"      value="BBCS-OSID"/>
  <property name="app.path"      value="/${app.name}"/>
  <property name="app.version"   value="0.5-dev"/>
  <property name="build.home"    value="${basedir}/build"/>
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="docs.home"     value="${basedir}/docs"/>
  <property name="src.home"      value="${basedir}/src"/>
  <property name="web.home"      value="${basedir}/web"/>

  <property name="build.class" value="${build.home}/classes" />
  <property name="build.lib"   value="${build.home}/lib" />
  <property name="dist.src"    value="${dist.home}/src"/>
  <property name="home.src"    value="${basedir}/src"/>
  <property name="dist.doc"    value="${dist.home}/docs"/>
  <property name="dist.lib"    value="${dist.home}/lib"/>
  <property name="lib.home"    value="../lib"/>
  <property name="extlib.home" value="../extlib"/>
  <property name="jar.name"    value="BBCS-OSID"/>
  <property name="jar.dir"     value="${dist.lib}"/>
  <property name="package.dir" value="${dist.lib}/package"/>


<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false" /> 


<!-- ================== Custom Ant Task Definitions ======================= -->
<!--
  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web application installed with Tomcat 5.  Before they
  can be successfully utilized, you must perform the following steps:

  - Copy the file "server/lib/catalina-ant.jar" from your Tomcat 5
    installation into the "lib" directory of your Ant installation.

  - Create a "build.properties" file in your application's top-level
    source directory (or your user login home directory) that defines
    appropriate values for the "manager.password", "manager.url", and
    "manager.username" properties described above.
    
    Here is the contents of a sample build.properties file.  At a minimum 
    you will have to modify the path for catalina.home

    <snip>
    manager.user=tomcat
    manager.password=tomcat
    manager.url=http://localhost:8080/manager
    
    catalina.home=/Users/pwilkins/Tools/jakarta-tomcat-5.0.30
    <snip>

  For more information about the Manager web application, and the functionality
  of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.

-->

  <taskdef name="deploy"   classname="org.apache.catalina.ant.DeployTask"/>
  <taskdef name="list"     classname="org.apache.catalina.ant.ListTask"/>
  <taskdef name="reload"   classname="org.apache.catalina.ant.ReloadTask"/>
  <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"/>


<!-- ==================== External Dependencies =========================== -->
<!--
  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into a target directory during execution of a "deploy" target.
-->
  <property name="junit.jar"   value="${extlib.home}/junit.jar" />


<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->
  <path id="compile.classpath">
    <pathelement location="${basedir}" />
    <pathelement path="${build.class}"/>	
    <pathelement location="${extlib.home}/servlet-api.jar"/>
    
    <!-- Include all elements that Tomcat exposes to applications -->
    <pathelement location="${catalina.home}/common/classes"/> 
        <fileset dir="${catalina.home}/common/endorsed">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${catalina.home}/common/lib">
          <include name="*.jar"/>
        </fileset>

    <pathelement location="${catalina.home}/shared/classes"/>
        <fileset dir="${catalina.home}/shared/lib">
          <include name="*.jar"/>
        </fileset>

  </path>

<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target and the "codegen" 
  target followed by the "compile" target, to force a complete recompile.
-->
  <target name="all" depends="clean, compile"
    description="Clean out build and dist directories, then compile"/>


<!-- ==================== Clean Target ==================================== -->
<!--
  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.
-->

  <target name="clean"
   description="Delete old build and dist directories">

    <delete dir="${build.home}" />
    <delete dir="${dist.home}" />
  </target>


<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->
  <target name="prepare">

    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>
    
    <!-- create a docs directory since it is expected by build -->
    <mkdir  dir="${docs.home}"/>
    
    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <!-- Copy external dependencies as required -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
    <mkdir  dir="${build.home}/WEB-INF/lib"/>
<!--
    <copy todir="${build.home}/WEB-INF/lib" file="${foo.jar}"/>
-->

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>

    <tstamp />
  </target>


<!-- ==================== Compile Target(s) ================================== -->
<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
-->

  <target name="compile" depends="prepare"
    description="Compile Java sources">
    
    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
    </javac>
    
    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>

  </target>

  <target name="compile1.4"
    description="Compile Java sources for java2 1.4"
    if="java1.4.present">
        <javac srcdir="${home.src}" destdir="${build.class}"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            target="1.1" 
        >
          <classpath refid="compile.classpath"/>
          <include name="**/*.java"/>
        </javac>
    </target>


<!-- ==================== Dist Target ===================================== -->
<!--
  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:

  * "compile" so that the entire web application (including external
    dependencies) will have been assembled

  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="compile"
   description="Create binary distribution">
    <!-- Copy documentation subdirectories -->
    <mkdir   dir="${dist.home}/docs"/>
    <copy    todir="${dist.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>

    <!-- Create application JAR file -->
<!--     <jar jarfile="${dist.home}/${app.name}-${app.version}.war"  -->
    <jar jarfile="${dist.home}/${app.name}.war" 
        basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>



<!-- ==================== Install Target ================================== -->
<!--
  The "install" target tells the specified Tomcat 5 installation to dynamically
  install this web application and make it available for execution.  It does
  *not* cause the existence of this web application to be remembered across
  Tomcat restarts; if you restart the server, you will need to re-install all
  this web application.

  If you have already installed this application, and simply want Tomcat to
  recognize that you have updated Java classes (or the web.xml file), use the
  "reload" target instead.

  NOTE:  This target will only succeed if it is run from the same server that
  Tomcat is running on.

  NOTE:  This is the logical opposite of the "remove" target.

-->

  <target name="install" depends="compile"
   description="Install application to servlet container">

    <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"
       localWar="file://${build.home}"/>

  </target>


<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="compile"
   description="Create Javadoc API documentation">

    <mkdir          dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>



<!-- ====================== List Target =================================== -->
<!--
  The "list" target asks the specified Tomcat 5 installation to list the
  currently running web applications, either loaded at startup time or
  installed dynamically.  It is useful to determine whether or not the
  application you are currently developing has been installed.
-->

  <target name="list"
   description="List installed applications on servlet container">

    <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>

  </target>

<!-- ==================== Reload Target =================================== -->

<!--

  The "reload" signals the specified application Tomcat 5 to shut itself down
  and reload. This can be useful when the web application context is not
  reloadable and you have updated classes or property files in the
  /WEB-INF/classes directory or when you have added or updated jar files in the
  /WEB-INF/lib directory.

  NOTE: The /WEB-INF/web.xml web application configuration file is not reread
  on a reload. If you have made changes to your web.xml file you must stop
  then start the web application. 

-->

  <target name="reload" depends="compile"
   description="Reload application on servlet container">

    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>

  </target>


<!-- ==================== Remove Target =================================== -->

<!--

  The "remove" target tells the specified Tomcat 5 installation to dynamically
  remove this web application from service.

  NOTE:  This is the logical opposite of the "install" target.

-->

  <target name="remove"
   description="Remove application on servlet container">

    <undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}"/>

  </target>

</project>
