<%@ page import="java.lang.String,				java.util.*,                java.text.*,                java.io.*,				blackboard.cms.filesystem.*,                blackboard.data.*,                blackboard.persist.role.*,                blackboard.data.role.PortalRole,                blackboard.persist.*,                blackboard.persist.user.*,                blackboard.data.course.*,                blackboard.data.user.*,                blackboard.persist.course.*,                blackboard.cms.filesystem.*,                blackboard.data.content.*,                blackboard.persist.content.*,                blackboard.data.user.*,                blackboard.base.*,                blackboard.platform.*,                blackboard.platform.persistence.*,                blackboard.platform.plugin.*,				blackboard.util.*,				org.apache.axis.encoding.Base64"          errorPage="/error.jsp"%><%!public class Entry {	public String _str = null;    public Entry(CSEntry csEntry, boolean top) 	{		String metadataKeys[] = new String[27];		metadataKeys[0] = CSEntryMetadata.DESCRIPTION;		metadataKeys[1] = CSEntryMetadata.DUBLINCORE_CONTRIBUTOR;		metadataKeys[2] = CSEntryMetadata.DUBLINCORE_COVERAGE;		metadataKeys[3] = CSEntryMetadata.DUBLINCORE_CREATOR;		metadataKeys[4] = CSEntryMetadata.DUBLINCORE_DATE;		metadataKeys[5] = CSEntryMetadata.DUBLINCORE_DESCRIPTION;		metadataKeys[6] = CSEntryMetadata.DUBLINCORE_FORMAT;		metadataKeys[7] = CSEntryMetadata.DUBLINCORE_IDENTIFIER;		metadataKeys[8] = CSEntryMetadata.DUBLINCORE_LANGUAGE;		metadataKeys[9] = CSEntryMetadata.DUBLINCORE_PUBLISHER;		metadataKeys[10] = CSEntryMetadata.DUBLINCORE_RELATION;		metadataKeys[11] = CSEntryMetadata.DUBLINCORE_RIGHTS;		metadataKeys[12] = CSEntryMetadata.DUBLINCORE_SOURCE;		metadataKeys[13] = CSEntryMetadata.DUBLINCORE_SUBJECT;		metadataKeys[14] = CSEntryMetadata.DUBLINCORE_TITLE;		metadataKeys[15] = CSEntryMetadata.DUBLINCORE_TYPE;		metadataKeys[16] = CSEntryMetadata.IMS_AGE_RANGE;		metadataKeys[17] = CSEntryMetadata.IMS_CATALOG_ENTRY;		metadataKeys[18] = CSEntryMetadata.IMS_CATALOG_TYPE;		metadataKeys[19] = CSEntryMetadata.IMS_DIFFICULTY;		metadataKeys[20] = CSEntryMetadata.IMS_EDUCATIONAL_CONTEXT;		metadataKeys[21] = CSEntryMetadata.IMS_IDENTIFIER;		metadataKeys[22] = CSEntryMetadata.IMS_LANGUAGE;		metadataKeys[23] = CSEntryMetadata.IMS_RESOURCETYPE;		metadataKeys[24] = CSEntryMetadata.KEYWORDS;		metadataKeys[25] = CSEntryMetadata.LEARNING_OBJECTIVES;		metadataKeys[26] = CSEntryMetadata.NAME;				StringBuffer sb = new StringBuffer();		try {			if ( csEntry instanceof CSDirectory ) {				sb.append( top ? "<directory>" : "<subdirectory>" );				sb.append(java.net.URLEncoder.encode(csEntry.getBaseName(),"UTF-8"));				sb.append("<path>");				sb.append(java.net.URLEncoder.encode(csEntry.getFullPath(),"UTF-8"));				sb.append("</path>");				List subList = ((CSDirectory)csEntry).getDirectoryContents();        		for (int k=0; k < subList.size(); k++) {					Entry nextEntry = new Entry( (CSEntry)subList.get(k), false );					sb.append(nextEntry.toString());				}				sb.append( top ? "</directory>" : "</subdirectory>" );			} else {				sb.append( top ? "<file>" : "<subfile>" );				sb.append(java.net.URLEncoder.encode(csEntry.getBaseName(),"UTF-8"));							CSEntryMetadata metadata = csEntry.getCSEntryMetadata();				for (int i=0; i < metadataKeys.length; i++) {					String nextKey = metadataKeys[i];					String metadataValue = metadata.getStandardProperty(nextKey);					if ( !(metadataValue.equals("")) ) {						sb.append("<");						sb.append(nextKey);						sb.append(">");						sb.append(metadataValue);						sb.append("</");						sb.append(nextKey);						sb.append(">");					}				}				sb.append("<creationtime>");				sb.append(csEntry.getCreationTimestamp().toString());				sb.append("</creationtime>");				sb.append("<lastupdate>");				sb.append(csEntry.getLastUpdateTimestamp().toString());				sb.append("</lastupdate>");				sb.append("<sizeinkbytes>");				sb.append( (new Long(csEntry.getSize()/1000)).toString() );				sb.append("</sizeinkbytes>");				if (csEntry instanceof CSFile) {					sb.append("<contenttype>");					String contentType = ((CSFile)csEntry).getFileContentType();					sb.append( contentType );					sb.append("</contenttype>");				}				sb.append("<path>");				sb.append(java.net.URLEncoder.encode(csEntry.getFullPath(),"UTF-8"));				sb.append("</path>");				sb.append( top ? "</file>" : "</subfile>" );			}		} catch (Exception ex) {			_str = ex.getMessage();			return;		}		_str = sb.toString();    }		public String toString()	{		return _str;	}}%><?xml version="1.0" encoding="UTF-8"?><contents><%CSContext theContext = null;String folder = "/";String fold = request.getParameter("folder");if (fold != null) {	folder = fold;}String dirName = request.getParameter("dir");String fileName = request.getParameter("file");try {    theContext = CSContext.getContext();    BbPersistenceManager bbPm = BbServiceManager.getPersistenceService().getDbPersistenceManager();    UserDbLoader uDbLoader = (UserDbLoader) bbPm.getLoader(UserDbLoader.TYPE);    PortalRoleDbLoader pRDbLoader = (PortalRoleDbLoader) bbPm.getLoader(PortalRoleDbLoader.TYPE); 	theContext.isSuperUser(true);      		    	if (dirName != null) {		CSEntry csd = theContext.findEntry(dirName);		if (csd instanceof CSDirectory) {			List subList = ((CSDirectory)csd).getDirectoryContents();        	for (int k=0; k < subList.size(); k++) {				CSEntry nextEntry = (CSEntry)subList.get(k);				if (nextEntry.getBaseName().equals(fileName)) {//					java.io.File tmp = new java.io.File(PlugInUtil.getConfigDirectory("bb", "csreports") + "/temp");					java.io.File tmp = java.io.File.createTempFile("osid","bbcontent");					java.io.FileOutputStream fos = new FileOutputStream(tmp);					((CSFile)nextEntry).getFileContent(fos);					fos.flush();					fos.close();					java.io.OutputStream output = null;					java.io.InputStream input = new java.io.FileInputStream(tmp);					String contentType = java.net.URLConnection.guessContentTypeFromName(fileName);					if (contentType == null) {						contentType = "application/octet-stream";					}					int contentLength = (new Long(nextEntry.getSize())).intValue();					response.reset();    			        response.setContentLength(contentLength);            		response.setContentType(contentType);            		response.setHeader("Content-disposition", "attachment; filename=\"" + fileName + "\"");            		output = new java.io.BufferedOutputStream(response.getOutputStream());            		// Write file contents to response.            		while (contentLength-- > 0) {                		output.write(input.read());            		}		            // Finalize task.        		    output.flush();					if (input != null) input.close();					if (output != null) output.close();					tmp.delete();					tmp.deleteOnExit();  	/*					// convert file to byte array					java.io.InputStream is = new java.io.FileInputStream(tmp);  			        long length = tmp.length(); 			        if (length > Integer.MAX_VALUE) {%>File is too large<%					} else {				        byte[] bytes = new byte[(int)length];				        int offset = 0;        				int numRead = 0;        				while ( (offset < bytes.length) && ( (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) ) {            				offset += numRead;        				}				        if (offset < bytes.length) {%>Error reading file<%        				} else {					        is.close();														// now convert to Base64							String encodedData = Base64.encode (bytes);%><%=encodedData%><%						}					}*/ 				}			}		}	} else {		CSEntry csd = theContext.findEntry(folder);		CSDirectory dir = (CSDirectory)csd;		List cseList = dir.getDirectoryContents();       	for (int j=0; j<cseList.size(); j++) {			CSEntry entry = (CSEntry)cseList.get(j);			Entry nextEntry = new Entry(entry,true);			String s = nextEntry.toString();			%><%=s%><%		}		%></contents><%	}} catch (Exception e) {     //theContext.rollback();        out.println(e.toString());} finally {    if (theContext != null) {        theContext.commit();    }}%>